{
  "name": "holderjs",
  "version": "0.0.0",
  "main": "holder.js",
  "dependencies": {},
  "gitHead": "5305ce2942aeb0fa46720d78d5b14838a9c1a51e",
  "readme": "Holder\n======\n\nHolder uses the `canvas` element and the data URI scheme to render image placeholders entirely in browser.\n\nHow to use it\n-------------\n\nInclude ``holder.js`` in your HTML:\n\n```html\n<script src=\"holder.js\"></script>\n```\n\nHolder will then process all images with a specific ``src`` attribute, like this one:\n\n```html\n<img src=\"holder.js/200x300\">\n```\n\nThe above tag will render as a placeholder 200 pixels wide and 300 pixels tall.\n\nTo avoid console 404 errors, you can use ``data-src`` instead of ``src``.\n\nHolder also includes support for themes, to help placeholders blend in with your layout. There are 3 default themes: ``gray``, ``industrial``, and ``social``. You can use them like this:\n\n```html\n<img src=\"holder.js/200x300/industrial\">\n```\n\nCustomizing themes\n------------------\n\nThemes have 3 properties: ``foreground``, ``background``, and ``size``. The ``size`` property specifies the minimum font size for the theme. You can create a sample theme like this:\n\n```js\nHolder.add_theme(\"dark\", {background:\"#000\", foreground:\"#aaa\", size:11})\n```\n\nUsing custom themes\n-------------------\n\nThere are two ways to use custom themes with Holder:\n\n* Include theme at runtime to render placeholders already using the theme name\n* Include theme at any point and re-render placeholders that are using the theme name\n\nThe first approach is the easiest. After you include ``holder.js``, add a ``script`` tag that adds the theme you want:\n\n```html\n<script src=\"holder.js\"></script>\n<script> Holder.add_theme(\"bright\", { background: \"white\", foreground: \"gray\", size: 12 })</script>\n```\n\nThe second approach requires that you call ``run`` after you add the theme, like this:\n\n```js\nHolder.add_theme(\"bright\", { background: \"white\", foreground: \"gray\", size: 12}).run()\n```\n\nUsing custom themes and domain on specific images\n-------------------------------------------------\n\nYou can use Holder in different areas on different images with custom themes:\n\n```html\n<img data-src=\"example.com/100x100/simple\" id=\"new\">\n```\n\n```js\nHolder.run({\n    domain: \"example.com\",\n    themes: {\n        \"simple\":{\n            background:\"#fff\",\n            foreground:\"#000\",\n            size:12\n            }\n    },\n    images: \"#new\"\n    })\n```\n\nUsing custom colors on specific images\n--------------------------------------\n\nCustom colors on a specific image can be specified in the ``background:foreground`` format using hex notation, like this:\n\n```html\n<img data-src=\"holder.js/100x200/#000:#fff\">\n```\n\nThe above will render a placeholder with a black background and white text.\n\nCustom text\n-----------\n\nYou can specify custom text using the ``text:`` operator:\n\n```html\n<img data-src=\"holder.js/200x200/text:hello world\">\n```\n\nIf you have a group of placeholders where you'd like to use particular text, you can do so by adding a ``text`` property to the theme:\n\n```js\nHolder.add_theme(\"thumbnail\", { background: \"#fff\", text: \"Thumbnail\" })\n```\n\nFluid placeholders\n------------------\n\nSpecifying a dimension in percentages creates a fluid placeholder that responds to media queries.\n\n```html\n<img data-src=\"holder.js/100%x75/social\">\n```\n\nBy default, the fluid placeholder will show its current size in pixels.\n\nBackground placeholders\n-----------------------\n\nHolder can render placeholders as background images for elements with the `holderjs` class, like this:\n\n```css\n#sample {background:url(?holder.js/200x200/social) no-repeat}\n```\n\n```html\n<div id=\"sample\" class=\"holderjs\"></div>\n```\n\nThe Holder URL in CSS should have a `?` in front. You can change the default class by specifying a selector as the `elements` property when calling `Holder.run`.\n\nCustomizing only the settings you need\n--------------------------------------\n\nHolder extends its default settings with the settings you provide, so you only have to include those settings you want changed. For example, you can run Holder on a specific domain like this:\n\n```js\nHolder.run({domain:\"example.com\"})\n```\n\nUsing custom settings on load\n-----------------------------\n\nYou can prevent Holder from running its default configuration by executing ``Holder.run`` with your custom settings right after including ``holder.js``. However, you'll have to execute ``Holder.run`` again to render any placeholders that use the default configuration.\n\nInserting an image with optional custom theme\n---------------------------------------------\n\nYou can add a placeholder programmatically by chaining Holder calls:\n\n```js\nHolder.add_theme(\"new\",{foreground:\"#ccc\", background:\"#000\", size:10}).add_image(\"holder.js/200x100/new\", \"body\").run()\n```\n\nThe first argument in ``add_image`` is the ``src`` attribute, and the second is a CSS selector of the parent element.\n\nBrowser support\n---------------\n\n* Chrome 1+\n* Firefox 3+\n* Safari 4+\n* Internet Explorer 9+, with fallback for IE6-8\n* Android 1+\n\nLicense\n-------\n\nHolder is provided under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0). Commercial use requires attribution.\n\nCredits\n-------\n\nHolder is a project by [Ivan Malopinsky](http://imsky.co).\n",
  "readmeFilename": "README.md",
  "_id": "holderjs@1.7.0",
  "description": "Holder ======",
  "commit": "5305ce2942aeb0fa46720d78d5b14838a9c1a51e",
  "repository": {
    "type": "git",
    "url": "git://github.com/imsky/holder.git"
  }
}